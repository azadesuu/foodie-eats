{
  "stats": {
    "suites": 29,
    "tests": 80,
    "passes": 80,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-08T18:16:23.933Z",
    "end": "2022-11-08T18:16:27.400Z",
    "duration": 3467,
    "testsRegistered": 80,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9fc0bd20-fd8d-4d54-863e-7c5ebdc605a4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await connectDB();",
          "err": {},
          "uuid": "1c1b75ff-6c6e-481b-bc7f-512ae98a6e4c",
          "parentUUID": "9fc0bd20-fd8d-4d54-863e-7c5ebdc605a4",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 5,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await closeDB();\nawait server.kill(() => {\n  console.log(\"Closing test server..\");\n  console.log(\"End of tests.\");\n  //the server is down when this is called. That won't take long. (<10s)\n});",
          "err": {},
          "uuid": "f62e30d3-76a3-45fb-b15d-4b9d96cec5a3",
          "parentUUID": "9fc0bd20-fd8d-4d54-863e-7c5ebdc605a4",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "c38b5276-228f-4942-8812-67ffe7693367",
          "title": "Unit tests ",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Unit tests \"",
              "fullTitle": "Unit tests  \"after all\" hook in \"Unit tests \"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "aa47c2f6-ea92-4e36-a183-8491492c4959",
              "parentUUID": "c38b5276-228f-4942-8812-67ffe7693367",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "247db11a-112d-4231-ac77-269c7dac09fc",
              "title": "Registration",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Registers the user",
                  "fullTitle": "Unit tests  Registration Registers the user",
                  "timedOut": false,
                  "duration": 623,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully signed up\"\n    });\n  });",
                  "err": {},
                  "uuid": "7761d0ad-8f8d-43d1-8ed8-5f88de92bc29",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the duplicate user (email)",
                  "fullTitle": "Unit tests  Registration Doesn't register the duplicate user (email)",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserDupEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"That username/email is already taken.\"\n    });\n  });",
                  "err": {},
                  "uuid": "7bc8485a-4ece-4859-bf3a-88f6d83d1fed",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the duplicate user (username)",
                  "fullTitle": "Unit tests  Registration Doesn't register the duplicate user (username)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserDupUsername)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"That username/email is already taken.\"\n    });\n  });",
                  "err": {},
                  "uuid": "b2cd68c7-c9f7-459e-bd61-eee659e2d64f",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the empty field (email)",
                  "fullTitle": "Unit tests  Registration Doesn't register the empty field (email)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserNoEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Username/email not defined.\"\n    });\n  });",
                  "err": {},
                  "uuid": "8833b5df-4eb8-4282-a804-7dc7b1a49972",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (username)",
                  "fullTitle": "Unit tests  Registration Doesn't register the invalid field (username)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidUname)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your username isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "cc180252-1630-4dfc-a1a6-0a3387934777",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (email)",
                  "fullTitle": "Unit tests  Registration Doesn't register the invalid field (email)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your email isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "7cf654e2-7ab9-4ff4-8b07-98a42caada56",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (email)",
                  "fullTitle": "Unit tests  Registration Doesn't register the invalid field (email)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your email isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "189c79fd-9c9b-4e49-8442-07dba71d9bf6",
                  "parentUUID": "247db11a-112d-4231-ac77-269c7dac09fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7761d0ad-8f8d-43d1-8ed8-5f88de92bc29",
                "7bc8485a-4ece-4859-bf3a-88f6d83d1fed",
                "b2cd68c7-c9f7-459e-bd61-eee659e2d64f",
                "8833b5df-4eb8-4282-a804-7dc7b1a49972",
                "cc180252-1630-4dfc-a1a6-0a3387934777",
                "7cf654e2-7ab9-4ff4-8b07-98a42caada56",
                "189c79fd-9c9b-4e49-8442-07dba71d9bf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 684,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "223da078-6026-41c2-ab04-afda21c9cef8",
              "title": "Get Reviews ",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get recent reviews",
                  "fullTitle": "Unit tests  Get Reviews  Get recent reviews",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReviewsByRecent\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Recent reviews found\" });\n  });",
                  "err": {},
                  "uuid": "c7d6ba75-14b2-4ffd-8e09-6e230e2b2a11",
                  "parentUUID": "223da078-6026-41c2-ab04-afda21c9cef8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get top reviews",
                  "fullTitle": "Unit tests  Get Reviews  Get top reviews",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReviewsByLikes\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Most liked reviews found.\" });\n  });",
                  "err": {},
                  "uuid": "b7c48e74-f599-4fa5-8e17-85e4ba44f27f",
                  "parentUUID": "223da078-6026-41c2-ab04-afda21c9cef8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7d6ba75-14b2-4ffd-8e09-6e230e2b2a11",
                "b7c48e74-f599-4fa5-8e17-85e4ba44f27f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "cb38f720-9ee3-49c6-90ef-911d61143a2f",
              "title": "Get one user ",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one user",
                  "fullTitle": "Unit tests  Get one user  Get one user",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/azadesuu\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "7611132f-356b-4f7d-a4a0-38156419af57",
                  "parentUUID": "cb38f720-9ee3-49c6-90ef-911d61143a2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't get invalid user",
                  "fullTitle": "Unit tests  Get one user  Doesn't get invalid user",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/aza\")\n  .then(function(res) {\n    assert.equal(204, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "6c184a7d-233c-4b7b-87b3-94ebfddb4eaf",
                  "parentUUID": "cb38f720-9ee3-49c6-90ef-911d61143a2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7611132f-356b-4f7d-a4a0-38156419af57",
                "6c184a7d-233c-4b7b-87b3-94ebfddb4eaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        },
        {
          "uuid": "d161566e-c33b-42f0-a88d-1075b279f67c",
          "title": "Integration tests: Review methods",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Integration tests: Review methods\"",
              "fullTitle": "Integration tests: Review methods \"before all\" hook in \"Integration tests: Review methods\"",
              "timedOut": false,
              "duration": 107,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearCollections();\nawait User.insertMany(testInput.userTests);\nawait Review.insertMany(testInput.reviewTests);",
              "err": {},
              "uuid": "e9075400-5fc0-4a82-9fad-494057265062",
              "parentUUID": "d161566e-c33b-42f0-a88d-1075b279f67c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Integration tests: Review methods\"",
              "fullTitle": "Integration tests: Review methods \"after all\" hook in \"Integration tests: Review methods\"",
              "timedOut": false,
              "duration": 61,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "24220e76-e501-4f8d-b7c8-b8f06b54e008",
              "parentUUID": "d161566e-c33b-42f0-a88d-1075b279f67c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "847b639c-f452-4d4f-bac4-9a6397fc5b93",
              "title": "Testing Authenticated Review Routes: (All should have error+message)",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) \"before all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- START OF REVIEW AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "57d99891-1d6d-4925-8855-f040b8c777ae",
                  "parentUUID": "847b639c-f452-4d4f-bac4-9a6397fc5b93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) \"after all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- END OF REVIEW AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "78121b68-46aa-4889-8355-421d5620a6f1",
                  "parentUUID": "847b639c-f452-4d4f-bac4-9a6397fc5b93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "d92e19fa-3580-400d-8306-cf25f30c73df",
                  "title": "Authenticate: Create Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Create One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: without token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .send(testInput.createReview1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "50b9c1eb-9000-44cf-bd12-5bf8427d6443",
                      "parentUUID": "d92e19fa-3580-400d-8306-cf25f30c73df",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Create One Review: with invalid token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: with invalid token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "9fd10e48-3e59-48c6-a8c5-9e32d4f4ba77",
                      "parentUUID": "d92e19fa-3580-400d-8306-cf25f30c73df",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Create One Review: with wrong token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: with wrong token",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "65cd3fd1-98be-4d00-a513-44ed326b83cb",
                      "parentUUID": "d92e19fa-3580-400d-8306-cf25f30c73df",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "50b9c1eb-9000-44cf-bd12-5bf8427d6443",
                    "9fd10e48-3e59-48c6-a8c5-9e32d4f4ba77",
                    "65cd3fd1-98be-4d00-a513-44ed326b83cb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 30,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "b690c7c9-1785-4e40-8484-fb604eb93808",
                  "title": "Authenticate: Update Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Update One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .send(testInput.updateReviewPriceRange)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "2fcd93eb-604f-4a53-9eec-1592e8b97efe",
                      "parentUUID": "b690c7c9-1785-4e40-8484-fb604eb93808",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update One Review: with invalid token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "4e28d127-acb1-4f4f-87f2-9fa88e7c7054",
                      "parentUUID": "b690c7c9-1785-4e40-8484-fb604eb93808",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update One Review: with wrong token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "77a4ff76-3e66-4e04-9a8b-574d3a20b5d4",
                      "parentUUID": "b690c7c9-1785-4e40-8484-fb604eb93808",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2fcd93eb-604f-4a53-9eec-1592e8b97efe",
                    "4e28d127-acb1-4f4f-87f2-9fa88e7c7054",
                    "77a4ff76-3e66-4e04-9a8b-574d3a20b5d4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 49,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "51b4a97a-b2be-4bea-8666-6e2e04b7ed16",
                  "title": "Authenticate: Like Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Like One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: without token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "e5c172fe-8ac3-4d11-a289-8bc7542d93fc",
                      "parentUUID": "51b4a97a-b2be-4bea-8666-6e2e04b7ed16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Like One Review: with invalid token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "21e035cd-60a6-4166-b187-fec03a196b3c",
                      "parentUUID": "51b4a97a-b2be-4bea-8666-6e2e04b7ed16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Like One Review: with wrong token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: with wrong token",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "e5e0a44f-b25a-40ea-bad1-c594b1f2c611",
                      "parentUUID": "51b4a97a-b2be-4bea-8666-6e2e04b7ed16",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e5c172fe-8ac3-4d11-a289-8bc7542d93fc",
                    "21e035cd-60a6-4166-b187-fec03a196b3c",
                    "e5e0a44f-b25a-40ea-bad1-c594b1f2c611"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 29,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "51fc6e94-160d-4e2c-bf18-6a226a691995",
                  "title": "Authenticate: Delete Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Delete One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: without token",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "86f96ab2-dab5-4e9c-aef4-a2291b89f74c",
                      "parentUUID": "51fc6e94-160d-4e2c-bf18-6a226a691995",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Delete One Review: with invalid token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "719e483a-3c36-4e31-821a-683c088b4616",
                      "parentUUID": "51fc6e94-160d-4e2c-bf18-6a226a691995",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Delete One Review: with wrong token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "c0afa800-50e4-4d2c-9a0c-84e44055532a",
                      "parentUUID": "51fc6e94-160d-4e2c-bf18-6a226a691995",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "86f96ab2-dab5-4e9c-aef4-a2291b89f74c",
                    "719e483a-3c36-4e31-821a-683c088b4616",
                    "c0afa800-50e4-4d2c-9a0c-84e44055532a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 100,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "8624aeed-99bf-48f9-b603-6b4679c57ce3",
              "title": "(CHECK) Get inserted User/Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one review",
                  "fullTitle": "Integration tests: Review methods (CHECK) Get inserted User/Review Get one review",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReview/6354ef7ed7bf245d8940dd72\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Review found\" });\n  });",
                  "err": {},
                  "uuid": "ae8e15fc-d6e9-4ed0-9875-64effe0add8d",
                  "parentUUID": "8624aeed-99bf-48f9-b603-6b4679c57ce3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get one user",
                  "fullTitle": "Integration tests: Review methods (CHECK) Get inserted User/Review Get one user",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/celenesaw\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "8c30dd02-7330-423c-9801-e4bb08250495",
                  "parentUUID": "8624aeed-99bf-48f9-b603-6b4679c57ce3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae8e15fc-d6e9-4ed0-9875-64effe0add8d",
                "8c30dd02-7330-423c-9801-e4bb08250495"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "61b89c84-8e66-4733-bb4c-434a6165f347",
              "title": "Integration: Log in User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Logs in the user",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Logs in the user",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.integrationUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    // setting tokens for user_auth\n    assert.equal(true, res.body !== undefined);\n    access_token = res.body;\n  });",
                  "err": {},
                  "uuid": "549996b5-1bf7-4548-989b-17ec51472cc4",
                  "parentUUID": "61b89c84-8e66-4733-bb4c-434a6165f347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong password)",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Doesn't log in the user (wrong password)",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Oops! Wrong password.\"\n    });\n  });",
                  "err": {},
                  "uuid": "0fc2426d-c1c8-4e62-bdac-099829b15d43",
                  "parentUUID": "61b89c84-8e66-4733-bb4c-434a6165f347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong email+password)",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Doesn't log in the user (wrong email+password)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "a4e84dd2-a62e-4734-a70c-56099c7a7382",
                  "parentUUID": "61b89c84-8e66-4733-bb4c-434a6165f347",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "549996b5-1bf7-4548-989b-17ec51472cc4",
                "0fc2426d-c1c8-4e62-bdac-099829b15d43",
                "a4e84dd2-a62e-4734-a70c-56099c7a7382"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "06f34bd0-127b-4c64-a9fc-db16073951fc",
              "title": "Integration: Authenticate user",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid access token provided",
                  "fullTitle": "Integration tests: Review methods Integration: Authenticate user Valid access token provided",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/findTokenUser\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.data.should.includes({\n      username: testInput.userTests[0].username\n    });\n  });",
                  "err": {},
                  "uuid": "2619aef2-754e-4661-893a-9ee774310831",
                  "parentUUID": "06f34bd0-127b-4c64-a9fc-db16073951fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2619aef2-754e-4661-893a-9ee774310831"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "5a666053-81ba-49fc-bc8d-b001fa6f2b85",
              "title": "Integration: Create Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Creates a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Creates a review: Review 1",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review created.\"\n    });\n  });",
                  "err": {},
                  "uuid": "729559e2-21a1-4355-a7d5-25e12fb4ff90",
                  "parentUUID": "5a666053-81ba-49fc-bc8d-b001fa6f2b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Creates a review: Review 2",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Creates a review: Review 2",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReview2)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review created.\"\n    });\n  });",
                  "err": {},
                  "uuid": "e542cfb4-c57a-4954-b672-6c2f2a2ee806",
                  "parentUUID": "5a666053-81ba-49fc-bc8d-b001fa6f2b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't create review: missing fields (address)",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Doesn't create review: missing fields (address)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReviewWrongAddress)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "93e1adb7-782a-491c-8409-d7fd805dd73c",
                  "parentUUID": "5a666053-81ba-49fc-bc8d-b001fa6f2b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't create review: missing fields (dateVisited)",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Doesn't create review: missing fields (dateVisited)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReviewWrongDateVisited)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "b5b7755f-ada2-4d47-bbdf-51db12cadce7",
                  "parentUUID": "5a666053-81ba-49fc-bc8d-b001fa6f2b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "729559e2-21a1-4355-a7d5-25e12fb4ff90",
                "e542cfb4-c57a-4954-b672-6c2f2a2ee806",
                "93e1adb7-782a-491c-8409-d7fd805dd73c",
                "b5b7755f-ada2-4d47-bbdf-51db12cadce7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "c527a591-ba3c-4697-a1ab-48baeb838bba",
              "title": "Integration: Update Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updates a review: Review 1 (Price Range)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Price Range)",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n  });",
                  "err": {},
                  "uuid": "1e67f5c6-db66-47d3-be2b-92f6c3d9060c",
                  "parentUUID": "c527a591-ba3c-4697-a1ab-48baeb838bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Description)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Description)",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewDescription)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n  });",
                  "err": {},
                  "uuid": "fac3b289-10a4-4f9f-870d-067b7581b134",
                  "parentUUID": "c527a591-ba3c-4697-a1ab-48baeb838bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Private)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Private)",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPrivate)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n    res.body.data.should.includes({\n      isPublic: false\n    });\n  });",
                  "err": {},
                  "uuid": "ef145a05-9c5e-4cae-be0e-b0fed2d4da96",
                  "parentUUID": "c527a591-ba3c-4697-a1ab-48baeb838bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Public)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Public)",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPublic)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n    res.body.data.should.includes({\n      isPublic: true\n    });\n  });",
                  "err": {},
                  "uuid": "c50d1385-6168-4aa9-8c98-1fdeaa0eb73d",
                  "parentUUID": "c527a591-ba3c-4697-a1ab-48baeb838bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't update a review: Review (No Review Id) ",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Doesn't update a review: Review (No Review Id) ",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewNoId)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "89a3e448-b8c7-4315-80ac-965336cf40d1",
                  "parentUUID": "c527a591-ba3c-4697-a1ab-48baeb838bba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e67f5c6-db66-47d3-be2b-92f6c3d9060c",
                "fac3b289-10a4-4f9f-870d-067b7581b134",
                "ef145a05-9c5e-4cae-be0e-b0fed2d4da96",
                "c50d1385-6168-4aa9-8c98-1fdeaa0eb73d",
                "89a3e448-b8c7-4315-80ac-965336cf40d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 282,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "0dd7fef0-0aa4-40a6-8946-5f203e482652",
              "title": "Integration: Like Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Likes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Likes a review: Review 1",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully liked the review\"\n    });\n  });",
                  "err": {},
                  "uuid": "823f337e-2780-4d98-a520-e44434681c43",
                  "parentUUID": "0dd7fef0-0aa4-40a6-8946-5f203e482652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Un-likes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Un-likes a review: Review 1",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: true })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully unliked the review\"\n    });\n  });",
                  "err": {},
                  "uuid": "ceb09699-7eb3-417a-8a91-897ffd0c566d",
                  "parentUUID": "0dd7fef0-0aa4-40a6-8946-5f203e482652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Failed to like a review: Review 1 (likeBool undefined)",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Failed to like a review: Review 1 (likeBool undefined)",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: undefined })\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Like boolean was not received.\"\n    });\n  });",
                  "err": {},
                  "uuid": "926470fd-666f-49cb-b9d8-de40b01200f4",
                  "parentUUID": "0dd7fef0-0aa4-40a6-8946-5f203e482652",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "823f337e-2780-4d98-a520-e44434681c43",
                "ceb09699-7eb3-417a-8a91-897ffd0c566d",
                "926470fd-666f-49cb-b9d8-de40b01200f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "c1962871-3c93-445a-9db5-142829196d9d",
              "title": "Integration: Delete Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deletes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Delete Review Deletes a review: Review 1",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review deleted.\"\n    });\n  });",
                  "err": {},
                  "uuid": "8c8fdeb4-280d-4160-ba10-993c0106db27",
                  "parentUUID": "c1962871-3c93-445a-9db5-142829196d9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fails to delete a review: Review 1 (already deleted) ",
                  "fullTitle": "Integration tests: Review methods Integration: Delete Review Fails to delete a review: Review 1 (already deleted) ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(204, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "c2f2beb8-852d-48e3-93d8-c257b35b093a",
                  "parentUUID": "c1962871-3c93-445a-9db5-142829196d9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c8fdeb4-280d-4160-ba10-993c0106db27",
                "c2f2beb8-852d-48e3-93d8-c257b35b093a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        },
        {
          "uuid": "472f8d82-8d2d-4f83-afc0-513b5cffa1cb",
          "title": "Integration tests: Account methods",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Integration tests: Account methods\"",
              "fullTitle": "Integration tests: Account methods \"before all\" hook in \"Integration tests: Account methods\"",
              "timedOut": false,
              "duration": 103,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearCollections();\nawait User.insertMany(testInput.userTests);\nawait Review.insertMany(testInput.reviewTests);",
              "err": {},
              "uuid": "ad3f9264-bad3-4a87-aa6f-f3cc98c4a915",
              "parentUUID": "472f8d82-8d2d-4f83-afc0-513b5cffa1cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Integration tests: Account methods\"",
              "fullTitle": "Integration tests: Account methods \"after all\" hook in \"Integration tests: Account methods\"",
              "timedOut": false,
              "duration": 73,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "de8342df-baaf-4e7b-bb54-11dfe0ef5c60",
              "parentUUID": "472f8d82-8d2d-4f83-afc0-513b5cffa1cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8e09879c-af71-42c1-8eed-e1f24ef92738",
              "title": "Testing Authenticated Account Routes: (All should have error+message)",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) \"before all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- START OF ACCOUNT AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "f3ee1ade-1f40-45b4-9028-2d443807e659",
                  "parentUUID": "8e09879c-af71-42c1-8eed-e1f24ef92738",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) \"after all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- END OF ACCOUNT AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "6bee2256-bf8a-4abc-88eb-57d3df417a90",
                  "parentUUID": "8e09879c-af71-42c1-8eed-e1f24ef92738",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "9d061b3c-2a78-46b9-9b76-cbaaa4bf7138",
                  "title": "Authenticate: Get My Reviews",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Get My Reviews: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "0c556398-bb65-46c6-a445-16a0c2d3a9ef",
                      "parentUUID": "9d061b3c-2a78-46b9-9b76-cbaaa4bf7138",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Get My Reviews: with invalid token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "6a64dfb7-44f3-4df1-bf84-ff0fd7fb449f",
                      "parentUUID": "9d061b3c-2a78-46b9-9b76-cbaaa4bf7138",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Get My Reviews: with wrong token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: with wrong token",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "14f16cdc-1760-47b9-87d6-e2cbefaa635f",
                      "parentUUID": "9d061b3c-2a78-46b9-9b76-cbaaa4bf7138",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0c556398-bb65-46c6-a445-16a0c2d3a9ef",
                    "6a64dfb7-44f3-4df1-bf84-ff0fd7fb449f",
                    "14f16cdc-1760-47b9-87d6-e2cbefaa635f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "13c7e862-5c0b-4f04-b022-08d5c2b9a3ef",
                  "title": "Authenticate: Bookmark Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Bookmark One Review: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "3d47839e-ed5b-4c94-b5d7-3e9425501d59",
                      "parentUUID": "13c7e862-5c0b-4f04-b022-08d5c2b9a3ef",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Bookmark One Review: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "8f4b1530-d305-4fdd-afdd-bc95cba77b40",
                      "parentUUID": "13c7e862-5c0b-4f04-b022-08d5c2b9a3ef",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Bookmark One Review: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "bce07c79-3a62-4e9c-bc5f-5224dff43caf",
                      "parentUUID": "13c7e862-5c0b-4f04-b022-08d5c2b9a3ef",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3d47839e-ed5b-4c94-b5d7-3e9425501d59",
                    "8f4b1530-d305-4fdd-afdd-bc95cba77b40",
                    "bce07c79-3a62-4e9c-bc5f-5224dff43caf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                  "title": "Authenticate: Update User Methods",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Update Password: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "23983bb2-f991-40f0-9b84-b00156e5d323",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update Password: with invalid token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .send(testInput.updateUser1Password)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "ced2dfa2-4270-4933-9fd7-6002a63361f7",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update Password: with wrong token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: with wrong token",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "f7489632-3257-4465-bdcb-8b15a8153703",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: without token",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "e182d7aa-c140-4c82-a0ad-4ff62e4b52aa",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: with invalid token ",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "a3215ce3-fc06-4905-b773-4458e6cd712d",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: with wrong token ",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "2dc963e9-8b86-4e32-9ecf-12adced7ace0",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "37097fc7-59e1-4f25-80ec-2225fd2ad720",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: with invalid token ",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "d9c1def2-a804-49d3-993d-d8a4d3c799dd",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: with wrong token ",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "e2ef9a81-64ec-421e-b8b1-7e06c221237e",
                      "parentUUID": "e811de37-50e3-4a8e-9b7b-25e3f0d41bf1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "23983bb2-f991-40f0-9b84-b00156e5d323",
                    "ced2dfa2-4270-4933-9fd7-6002a63361f7",
                    "f7489632-3257-4465-bdcb-8b15a8153703",
                    "e182d7aa-c140-4c82-a0ad-4ff62e4b52aa",
                    "a3215ce3-fc06-4905-b773-4458e6cd712d",
                    "2dc963e9-8b86-4e32-9ecf-12adced7ace0",
                    "37097fc7-59e1-4f25-80ec-2225fd2ad720",
                    "d9c1def2-a804-49d3-993d-d8a4d3c799dd",
                    "e2ef9a81-64ec-421e-b8b1-7e06c221237e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 79,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "7cc25cb5-19b4-4bdf-ac0e-2be3406c6aea",
              "title": "(CHECK) Get inserted User/Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one review",
                  "fullTitle": "Integration tests: Account methods (CHECK) Get inserted User/Review Get one review",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReview/6354ef7ed7bf245d8940dd72\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Review found\" });\n  });",
                  "err": {},
                  "uuid": "09f95355-c44e-4191-8241-9b43147f3d3c",
                  "parentUUID": "7cc25cb5-19b4-4bdf-ac0e-2be3406c6aea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get one user",
                  "fullTitle": "Integration tests: Account methods (CHECK) Get inserted User/Review Get one user",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/celenesaw\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "a1137269-7ae4-4d17-a3a4-58b7e4d46768",
                  "parentUUID": "7cc25cb5-19b4-4bdf-ac0e-2be3406c6aea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09f95355-c44e-4191-8241-9b43147f3d3c",
                "a1137269-7ae4-4d17-a3a4-58b7e4d46768"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "5e20e76d-af55-4e67-9e51-6c73275bf6f8",
              "title": "Integration: Log in User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Logs in the user",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Logs in the user",
                  "timedOut": false,
                  "duration": 80,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.integrationUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    // setting tokens for user_auth\n    access_token = res.body;\n  });",
                  "err": {},
                  "uuid": "52ca64bc-93fe-4fde-83f8-e722a6a439f3",
                  "parentUUID": "5e20e76d-af55-4e67-9e51-6c73275bf6f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong password)",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Doesn't log in the user (wrong password)",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Oops! Wrong password.\"\n    });\n  });",
                  "err": {},
                  "uuid": "a728378b-7932-44e7-b242-95492104e865",
                  "parentUUID": "5e20e76d-af55-4e67-9e51-6c73275bf6f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong email+password)",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Doesn't log in the user (wrong email+password)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "e9960a35-0b35-4520-880c-75f33d34fcb4",
                  "parentUUID": "5e20e76d-af55-4e67-9e51-6c73275bf6f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52ca64bc-93fe-4fde-83f8-e722a6a439f3",
                "a728378b-7932-44e7-b242-95492104e865",
                "e9960a35-0b35-4520-880c-75f33d34fcb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "28bddea1-3066-4bd7-9a7b-820db74acb47",
              "title": "Integration: Get My Reviews",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get my reviews: User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get My Reviews Get my reviews: User 1",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"My reviews found.\"\n    });\n  });",
                  "err": {},
                  "uuid": "438514dc-f145-403e-9565-42d589dc8705",
                  "parentUUID": "28bddea1-3066-4bd7-9a7b-820db74acb47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "438514dc-f145-403e-9565-42d589dc8705"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "b741a5b2-1613-450b-ba3e-8e98df947ba9",
              "title": "Integration: Get Other Reviews",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get other reviews: User 3 (list of 1)",
                  "fullTitle": "Integration tests: Account methods Integration: Get Other Reviews Get other reviews: User 3 (list of 1)",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/other-reviews/${userId3}`)\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Other reviews found.\"\n    });\n    assert.equal(1, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "321a3116-04e9-43ea-b580-60bca7add6b5",
                  "parentUUID": "b741a5b2-1613-450b-ba3e-8e98df947ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get other reviews: User 2 (list of 0)",
                  "fullTitle": "Integration tests: Account methods Integration: Get Other Reviews Get other reviews: User 2 (list of 0)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/other-reviews/${userId2}`)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Other reviews found.\"\n    });\n    assert.equal(0, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "e8888bc4-9add-4956-8829-26f2880047e9",
                  "parentUUID": "b741a5b2-1613-450b-ba3e-8e98df947ba9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "321a3116-04e9-43ea-b580-60bca7add6b5",
                "e8888bc4-9add-4956-8829-26f2880047e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "03103ded-e1dc-4ab2-82e1-ea82e7683fd7",
              "title": "Integration: Bookmark Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Bookmarks a review: Review 1",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Bookmarks a review: Review 1",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "eb0f36bb-912f-4617-80b7-fe9eb09eda80",
                  "parentUUID": "03103ded-e1dc-4ab2-82e1-ea82e7683fd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Un-bookmarks a review: Review 1",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Un-bookmarks a review: Review 1",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: true })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was un-bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "2de2417c-dbc3-4c17-a646-c2dde9258a9e",
                  "parentUUID": "03103ded-e1dc-4ab2-82e1-ea82e7683fd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Failed to bookmark a review: Review 1 (bookmarkedBool undefined)",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Failed to bookmark a review: Review 1 (bookmarkedBool undefined)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: undefined })\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Bookmarked bool was not received.\"\n    });\n  });",
                  "err": {},
                  "uuid": "629d9e47-858c-4c1d-907c-2f2ae1556fa7",
                  "parentUUID": "03103ded-e1dc-4ab2-82e1-ea82e7683fd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb0f36bb-912f-4617-80b7-fe9eb09eda80",
                "2de2417c-dbc3-4c17-a646-c2dde9258a9e",
                "629d9e47-858c-4c1d-907c-2f2ae1556fa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "26ce4c25-2a7e-4ddc-b3df-9c6847534684",
              "title": "Integration: Get Bookmarks",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Bookmarks a review: Review 1, User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Bookmarks a review: Review 1, User 1",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "de0624ef-6054-4669-ad59-d74d7a03e34f",
                  "parentUUID": "26ce4c25-2a7e-4ddc-b3df-9c6847534684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get my bookmarks: User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Get my bookmarks: User 1",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(`/account/my-bookmarks/get`)\n  .send(testInput.bookmarksList)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"My bookmarks found.\"\n    });\n    assert.equal(1, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "0f815d4f-8885-464c-b342-f84585f3e929",
                  "parentUUID": "26ce4c25-2a7e-4ddc-b3df-9c6847534684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get bookmarks: list undefined",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Get bookmarks: list undefined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(`/account/my-bookmarks/get`)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "c49364a5-ed46-4b54-b041-4535cc7b91f9",
                  "parentUUID": "26ce4c25-2a7e-4ddc-b3df-9c6847534684",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de0624ef-6054-4669-ad59-d74d7a03e34f",
                "0f815d4f-8885-464c-b342-f84585f3e929",
                "c49364a5-ed46-4b54-b041-4535cc7b91f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
              "title": "Integration: Update User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updates user password",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user password",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully updated password.\"\n    });\n  });",
                  "err": {},
                  "uuid": "535c2841-8353-412b-b178-e08215a79779",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user password: weak password",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user password: weak password",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1PasswordWeak)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "caffcca4-260a-4568-8153-72541d24497d",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully updated theme.\"\n    });\n  });",
                  "err": {},
                  "uuid": "712ccb40-3b1b-4f17-a44b-0020009b2975",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme: Undefined Theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme: Undefined Theme",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1Undefined)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"New theme is not defined.\"\n    });\n  });",
                  "err": {},
                  "uuid": "e0232dad-4780-48e8-918c-ab6b3c539028",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme: Invalid theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme: Invalid theme",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1wrong)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"New theme is not available.\"\n    });\n  });",
                  "err": {},
                  "uuid": "7f5edb78-5677-4b97-94d5-5393036228b8",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.data.should.includes(testInput.updateUser1);\n  });",
                  "err": {},
                  "uuid": "57ccfae8-a786-444d-a6d5-a26834833ae1",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details: Invalid username",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details: Invalid username",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1InvalidUsername)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({ message: \"Username/Email is not valid.\" });\n  });",
                  "err": {},
                  "uuid": "457c4b95-47ff-4076-8d9d-35f7cb8a6040",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details: Invalid email",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details: Invalid email",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1InvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({ message: \"Username/Email is not valid.\" });\n  });",
                  "err": {},
                  "uuid": "d28afda3-c111-4aef-aeb9-1eeb69083daa",
                  "parentUUID": "f41c464b-b5c7-4602-9b2c-a681a8d72b2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "535c2841-8353-412b-b178-e08215a79779",
                "caffcca4-260a-4568-8153-72541d24497d",
                "712ccb40-3b1b-4f17-a44b-0020009b2975",
                "e0232dad-4780-48e8-918c-ab6b3c539028",
                "7f5edb78-5677-4b97-94d5-5393036228b8",
                "57ccfae8-a786-444d-a6d5-a26834833ae1",
                "457c4b95-47ff-4076-8d9d-35f7cb8a6040",
                "d28afda3-c111-4aef-aeb9-1eeb69083daa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 500000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "html": "true"
      },
      "version": "5.2.0"
    }
  }
}