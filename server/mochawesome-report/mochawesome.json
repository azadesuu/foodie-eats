{
  "stats": {
    "suites": 29,
    "tests": 80,
    "passes": 80,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-06T17:52:16.616Z",
    "end": "2022-11-06T17:52:20.329Z",
    "duration": 3713,
    "testsRegistered": 80,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "14edb582-9545-497e-86bf-4e4bf93521ad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 7,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await connectDB();",
          "err": {},
          "uuid": "d045cc4a-7ba3-4665-93be-894b03e2e1dc",
          "parentUUID": "14edb582-9545-497e-86bf-4e4bf93521ad",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 8,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await closeDB();\nawait server.kill(() => {\n  console.log(\"Closing test server..\");\n  console.log(\"End of tests.\");\n  //the server is down when this is called. That won't take long. (<10s)\n});",
          "err": {},
          "uuid": "f1642397-18f6-4c08-a4f8-d747dd41bc4f",
          "parentUUID": "14edb582-9545-497e-86bf-4e4bf93521ad",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b583d6a2-f502-4115-b185-039e20604983",
          "title": "Unit tests ",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Unit tests \"",
              "fullTitle": "Unit tests  \"after all\" hook in \"Unit tests \"",
              "timedOut": false,
              "duration": 61,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "2904eec7-be29-488b-8b49-06fd7a486bc4",
              "parentUUID": "b583d6a2-f502-4115-b185-039e20604983",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
              "title": "Registration ",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Registers the user",
                  "fullTitle": "Unit tests  Registration  Registers the user",
                  "timedOut": false,
                  "duration": 665,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(3000);\nreturn await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "22e6b5c4-cb6e-4787-9975-23013da10590",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the duplicate user (email)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the duplicate user (email)",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserDupEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"That username/email is already taken.\"\n    });\n  });",
                  "err": {},
                  "uuid": "abae5f74-4572-4048-8466-9c26d21537be",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the duplicate user (username)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the duplicate user (username)",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserDupUsername)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"That username/email is already taken.\"\n    });\n  });",
                  "err": {},
                  "uuid": "43392bcc-aa07-42a6-a306-860cc133707a",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the empty field (email)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the empty field (email)",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserNoEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Username/email not defined.\"\n    });\n  });",
                  "err": {},
                  "uuid": "21ff0665-048d-4bb4-8e51-762fbe36f7a0",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (username)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the invalid field (username)",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidUname)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your username isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "1b9173a5-3b52-451f-8cba-86f6462731a8",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (email)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the invalid field (email)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your email isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "206ece43-415e-498a-9f6e-cea518ab5321",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't register the invalid field (email)",
                  "fullTitle": "Unit tests  Registration  Doesn't register the invalid field (email)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/signup\")\n  .send(testInput.newUserInvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Your email isn't valid.\"\n    });\n  });",
                  "err": {},
                  "uuid": "fa4bc364-554f-436e-bdd0-074b41edf0b6",
                  "parentUUID": "11891e21-fa0e-48a9-81e6-9d7b681c18fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22e6b5c4-cb6e-4787-9975-23013da10590",
                "abae5f74-4572-4048-8466-9c26d21537be",
                "43392bcc-aa07-42a6-a306-860cc133707a",
                "21ff0665-048d-4bb4-8e51-762fbe36f7a0",
                "1b9173a5-3b52-451f-8cba-86f6462731a8",
                "206ece43-415e-498a-9f6e-cea518ab5321",
                "fa4bc364-554f-436e-bdd0-074b41edf0b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 805,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "3f4ac291-5ad7-4293-9b60-b354d494ba53",
              "title": "Get Reviews ",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get recent reviews",
                  "fullTitle": "Unit tests  Get Reviews  Get recent reviews",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReviewsByRecent\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Recent reviews found\" });\n  });",
                  "err": {},
                  "uuid": "424a5449-de46-4b2b-88f2-2acc9c9a6e3e",
                  "parentUUID": "3f4ac291-5ad7-4293-9b60-b354d494ba53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get top reviews",
                  "fullTitle": "Unit tests  Get Reviews  Get top reviews",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReviewsByLikes\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Most liked reviews found.\" });\n  });",
                  "err": {},
                  "uuid": "ce1e40d1-8434-44c3-9b2c-eb6da8623200",
                  "parentUUID": "3f4ac291-5ad7-4293-9b60-b354d494ba53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "424a5449-de46-4b2b-88f2-2acc9c9a6e3e",
                "ce1e40d1-8434-44c3-9b2c-eb6da8623200"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "1ea99c15-8081-481c-bd88-cb69259fcd6d",
              "title": "Get one user ",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one user",
                  "fullTitle": "Unit tests  Get one user  Get one user",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/azadesuu\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "4e2b994e-4507-40de-a76a-f7cd0d1f288e",
                  "parentUUID": "1ea99c15-8081-481c-bd88-cb69259fcd6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't get invalid user",
                  "fullTitle": "Unit tests  Get one user  Doesn't get invalid user",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/aza\")\n  .then(function(res) {\n    assert.equal(204, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "2e4b3279-ed9b-4c91-9e28-233ee55f2548",
                  "parentUUID": "1ea99c15-8081-481c-bd88-cb69259fcd6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e2b994e-4507-40de-a76a-f7cd0d1f288e",
                "2e4b3279-ed9b-4c91-9e28-233ee55f2548"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        },
        {
          "uuid": "caa67438-78dd-4365-b407-a29baeba951c",
          "title": "Integration tests: Review methods",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Integration tests: Review methods\"",
              "fullTitle": "Integration tests: Review methods \"before all\" hook in \"Integration tests: Review methods\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearCollections();\nawait User.insertMany(testInput.userTests);\nawait Review.insertMany(testInput.reviewTests);",
              "err": {},
              "uuid": "8d1d74ee-68a4-4c1c-97b0-c5fda7a61a19",
              "parentUUID": "caa67438-78dd-4365-b407-a29baeba951c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Integration tests: Review methods\"",
              "fullTitle": "Integration tests: Review methods \"after all\" hook in \"Integration tests: Review methods\"",
              "timedOut": false,
              "duration": 66,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "2e514476-8511-4032-a090-bb04a66e581d",
              "parentUUID": "caa67438-78dd-4365-b407-a29baeba951c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f4223fde-6c6a-4ad8-bf0f-c97864186619",
              "title": "Testing Authenticated Review Routes: (All should have error+message)",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) \"before all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- START OF REVIEW AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "e6f48a0b-efed-47e6-a8d9-bb3ad9c17c55",
                  "parentUUID": "f4223fde-6c6a-4ad8-bf0f-c97864186619",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) \"after all\" hook in \"Testing Authenticated Review Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- END OF REVIEW AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "95c2778c-034d-460c-88da-a9355ab2cfe0",
                  "parentUUID": "f4223fde-6c6a-4ad8-bf0f-c97864186619",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "a26e145f-84c0-4ab1-bf24-a48e08e6fc88",
                  "title": "Authenticate: Create Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Create One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: without token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .send(testInput.createReview1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "8cc477be-a451-4626-a0fd-b5349e434e20",
                      "parentUUID": "a26e145f-84c0-4ab1-bf24-a48e08e6fc88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Create One Review: with invalid token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: with invalid token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "0d946bb9-e336-4e6e-b575-7e36608e5bce",
                      "parentUUID": "a26e145f-84c0-4ab1-bf24-a48e08e6fc88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Create One Review: with wrong token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Create Review (Fail) Create One Review: with wrong token",
                      "timedOut": false,
                      "duration": 24,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "a0c399b3-57ac-44b6-9efc-46172345e8a6",
                      "parentUUID": "a26e145f-84c0-4ab1-bf24-a48e08e6fc88",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8cc477be-a451-4626-a0fd-b5349e434e20",
                    "0d946bb9-e336-4e6e-b575-7e36608e5bce",
                    "a0c399b3-57ac-44b6-9efc-46172345e8a6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 32,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "59f9a29f-dffe-4ab1-8914-f9f4794fdb62",
                  "title": "Authenticate: Update Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Update One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: without token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .send(testInput.updateReviewPriceRange)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "69d66799-e11a-484c-8881-8efbfca7db31",
                      "parentUUID": "59f9a29f-dffe-4ab1-8914-f9f4794fdb62",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update One Review: with invalid token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "0c3b0bc4-023c-4b79-9fae-8ed0d0d2c64c",
                      "parentUUID": "59f9a29f-dffe-4ab1-8914-f9f4794fdb62",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update One Review: with wrong token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Update Review (Fail) Update One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 43,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "4e994a50-f553-45fd-aaa9-067ad65c92e2",
                      "parentUUID": "59f9a29f-dffe-4ab1-8914-f9f4794fdb62",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "69d66799-e11a-484c-8881-8efbfca7db31",
                    "0c3b0bc4-023c-4b79-9fae-8ed0d0d2c64c",
                    "4e994a50-f553-45fd-aaa9-067ad65c92e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 50,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "235628e5-073f-401c-b1b8-4f57bd548bde",
                  "title": "Authenticate: Like Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Like One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: without token",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "22b2a06f-bd0a-4297-bf38-d751e89d2264",
                      "parentUUID": "235628e5-073f-401c-b1b8-4f57bd548bde",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Like One Review: with invalid token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "766af69a-b035-4c78-b35b-34a67fdeffd5",
                      "parentUUID": "235628e5-073f-401c-b1b8-4f57bd548bde",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Like One Review: with wrong token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Like Review (Fail) Like One Review: with wrong token",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "275b74e9-4514-4374-acb6-c06c1db529e7",
                      "parentUUID": "235628e5-073f-401c-b1b8-4f57bd548bde",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "22b2a06f-bd0a-4297-bf38-d751e89d2264",
                    "766af69a-b035-4c78-b35b-34a67fdeffd5",
                    "275b74e9-4514-4374-acb6-c06c1db529e7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 29,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "ee5b0686-3865-4916-b833-ac4048799b14",
                  "title": "Authenticate: Delete Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Delete One Review: without token",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: without token",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "b7e71280-6094-4181-a529-5a15457b69da",
                      "parentUUID": "ee5b0686-3865-4916-b833-ac4048799b14",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Delete One Review: with invalid token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "cbf78bba-370f-463c-b850-9dc691b1ebc9",
                      "parentUUID": "ee5b0686-3865-4916-b833-ac4048799b14",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Delete One Review: with wrong token ",
                      "fullTitle": "Integration tests: Review methods Testing Authenticated Review Routes: (All should have error+message) Authenticate: Delete Review (Fail) Delete One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 86,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "41c2ac13-cb26-4f0f-ab4e-f070e64456d1",
                      "parentUUID": "ee5b0686-3865-4916-b833-ac4048799b14",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b7e71280-6094-4181-a529-5a15457b69da",
                    "cbf78bba-370f-463c-b850-9dc691b1ebc9",
                    "41c2ac13-cb26-4f0f-ab4e-f070e64456d1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 131,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "a176feaf-2b38-4fb5-895f-aab9296706cd",
              "title": "Get inserted User/Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one review",
                  "fullTitle": "Integration tests: Review methods Get inserted User/Review Get one review",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReview/6354ef7ed7bf245d8940dd72\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Review found\" });\n  });",
                  "err": {},
                  "uuid": "ac5e8711-acfb-4273-8887-b1b8c13421c9",
                  "parentUUID": "a176feaf-2b38-4fb5-895f-aab9296706cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get one user",
                  "fullTitle": "Integration tests: Review methods Get inserted User/Review Get one user",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/celenesaw\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "8b24a64f-3d70-4c29-8946-99f39194eb9d",
                  "parentUUID": "a176feaf-2b38-4fb5-895f-aab9296706cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac5e8711-acfb-4273-8887-b1b8c13421c9",
                "8b24a64f-3d70-4c29-8946-99f39194eb9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "a1e3310f-9a5b-44e3-bef4-ee540e97d6c4",
              "title": "Integration: Log in User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Logs in the user",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Logs in the user",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.integrationUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    // setting tokens for user_auth\n    assert.equal(true, res.body !== undefined);\n    access_token = res.body;\n  });",
                  "err": {},
                  "uuid": "e7f96e7b-fd3b-453d-935e-efa8e5ad8a7e",
                  "parentUUID": "a1e3310f-9a5b-44e3-bef4-ee540e97d6c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong password)",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Doesn't log in the user (wrong password)",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "ecdffbc2-8f2e-433a-9e88-92f12a0e8577",
                  "parentUUID": "a1e3310f-9a5b-44e3-bef4-ee540e97d6c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong email+password)",
                  "fullTitle": "Integration tests: Review methods Integration: Log in User Doesn't log in the user (wrong email+password)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "f7657307-0c29-4bca-ac4b-f8cfe5db7780",
                  "parentUUID": "a1e3310f-9a5b-44e3-bef4-ee540e97d6c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7f96e7b-fd3b-453d-935e-efa8e5ad8a7e",
                "ecdffbc2-8f2e-433a-9e88-92f12a0e8577",
                "f7657307-0c29-4bca-ac4b-f8cfe5db7780"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 178,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "5a9862c5-5ab1-4eb3-9bc4-227097c3791e",
              "title": "Integration: Authenticate user",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid access token provided",
                  "fullTitle": "Integration tests: Review methods Integration: Authenticate user Valid access token provided",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/findTokenUser\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.data.should.includes({\n      username: testInput.userTests[0].username\n    });\n  });",
                  "err": {},
                  "uuid": "081df961-33ed-4677-8c7f-ffd2f5190d7b",
                  "parentUUID": "5a9862c5-5ab1-4eb3-9bc4-227097c3791e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "081df961-33ed-4677-8c7f-ffd2f5190d7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "189a4714-97dd-4762-b3b2-99db63bfcec4",
              "title": "Integration: Create Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Creates a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Creates a review: Review 1",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReview1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review created.\"\n    });\n  });",
                  "err": {},
                  "uuid": "da6c0f5c-0806-4d2d-bab3-840077d25ea3",
                  "parentUUID": "189a4714-97dd-4762-b3b2-99db63bfcec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Creates a review: Review 2",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Creates a review: Review 2",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReview2)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review created.\"\n    });\n  });",
                  "err": {},
                  "uuid": "86d4b2fe-fea4-4769-9509-85a052dc5a4c",
                  "parentUUID": "189a4714-97dd-4762-b3b2-99db63bfcec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't create review: missing fields (address)",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Doesn't create review: missing fields (address)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReviewWrongAddress)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "f80005db-53af-47f1-a66b-7d7590619b35",
                  "parentUUID": "189a4714-97dd-4762-b3b2-99db63bfcec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't create review: missing fields (dateVisited)",
                  "fullTitle": "Integration tests: Review methods Integration: Create Review Doesn't create review: missing fields (dateVisited)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(\"/review/createReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.createReviewWrongDateVisited)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "094081a0-733a-47c5-a9ad-c50667b12c04",
                  "parentUUID": "189a4714-97dd-4762-b3b2-99db63bfcec4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da6c0f5c-0806-4d2d-bab3-840077d25ea3",
                "86d4b2fe-fea4-4769-9509-85a052dc5a4c",
                "f80005db-53af-47f1-a66b-7d7590619b35",
                "094081a0-733a-47c5-a9ad-c50667b12c04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
              "title": "Integration: Update Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updates a review: Review 1 (Price Range)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Price Range)",
                  "timedOut": false,
                  "duration": 69,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPriceRange)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n  });",
                  "err": {},
                  "uuid": "e4e1f873-8638-4544-aaec-81725eca8e57",
                  "parentUUID": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Description)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Description)",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewDescription)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n  });",
                  "err": {},
                  "uuid": "53563831-c811-4a45-b561-931450506c16",
                  "parentUUID": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Private)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Private)",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPrivate)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n    res.body.data.should.includes({\n      isPublic: false\n    });\n  });",
                  "err": {},
                  "uuid": "fc19ddbe-29b7-4dc9-ba5f-480416fd6ee5",
                  "parentUUID": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates a review: Review 1 (Public)",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Updates a review: Review 1 (Public)",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewPublic)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review updated.\"\n    });\n    res.body.data.should.includes({\n      isPublic: true\n    });\n  });",
                  "err": {},
                  "uuid": "ed7dc7ea-a8c8-481d-8f9b-4b37257a1b54",
                  "parentUUID": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't update a review: Review (No Review Id) ",
                  "fullTitle": "Integration tests: Review methods Integration: Update Review Doesn't update a review: Review (No Review Id) ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(\"/review/updateReview\")\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateReviewNoId)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "c1053bbc-e61f-450c-be4b-88f4afc77a63",
                  "parentUUID": "a5bbf8d1-98cd-4b13-8138-cef2c3dfe295",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4e1f873-8638-4544-aaec-81725eca8e57",
                "53563831-c811-4a45-b561-931450506c16",
                "fc19ddbe-29b7-4dc9-ba5f-480416fd6ee5",
                "ed7dc7ea-a8c8-481d-8f9b-4b37257a1b54",
                "c1053bbc-e61f-450c-be4b-88f4afc77a63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "a7945fd5-5198-4978-bcda-439d91897168",
              "title": "Integration: Like Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Likes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Likes a review: Review 1",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully liked the review\"\n    });\n  });",
                  "err": {},
                  "uuid": "7bb0b3a6-a706-48cf-8db0-cb60aa4fa101",
                  "parentUUID": "a7945fd5-5198-4978-bcda-439d91897168",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Un-likes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Un-likes a review: Review 1",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: true })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully unliked the review\"\n    });\n  });",
                  "err": {},
                  "uuid": "5f736a52-fdc9-4d8a-905e-b98c72b33d02",
                  "parentUUID": "a7945fd5-5198-4978-bcda-439d91897168",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Failed to like a review: Review 1 (likeBool undefined)",
                  "fullTitle": "Integration tests: Review methods Integration: Like Review Failed to like a review: Review 1 (likeBool undefined)",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/review/like/${userId}/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ likeBool: undefined })\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Like boolean was not received.\"\n    });\n  });",
                  "err": {},
                  "uuid": "3c7fe7f0-8cbb-4f70-a26d-7199a300335d",
                  "parentUUID": "a7945fd5-5198-4978-bcda-439d91897168",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bb0b3a6-a706-48cf-8db0-cb60aa4fa101",
                "5f736a52-fdc9-4d8a-905e-b98c72b33d02",
                "3c7fe7f0-8cbb-4f70-a26d-7199a300335d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 174,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "6b8a869c-bd93-4d5e-9d28-b69beeb0d206",
              "title": "Integration: Delete Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deletes a review: Review 1",
                  "fullTitle": "Integration tests: Review methods Integration: Delete Review Deletes a review: Review 1",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review deleted.\"\n    });\n  });",
                  "err": {},
                  "uuid": "ef14d403-e876-4d70-b40c-b5d148a3fad7",
                  "parentUUID": "6b8a869c-bd93-4d5e-9d28-b69beeb0d206",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fails to delete a review: Review 1 (already deleted) ",
                  "fullTitle": "Integration tests: Review methods Integration: Delete Review Fails to delete a review: Review 1 (already deleted) ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .delete(`/review/delete/${reviewId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(204, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "0722cb9c-602a-4242-92e8-af1925ab151d",
                  "parentUUID": "6b8a869c-bd93-4d5e-9d28-b69beeb0d206",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef14d403-e876-4d70-b40c-b5d148a3fad7",
                "0722cb9c-602a-4242-92e8-af1925ab151d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        },
        {
          "uuid": "70d018c9-fb62-4232-bfab-58f0812293dc",
          "title": "Integration tests: Account methods",
          "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
          "file": "\\test\\apptest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Integration tests: Account methods\"",
              "fullTitle": "Integration tests: Account methods \"before all\" hook in \"Integration tests: Account methods\"",
              "timedOut": false,
              "duration": 105,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearCollections();\nawait User.insertMany(testInput.userTests);\nawait Review.insertMany(testInput.reviewTests);",
              "err": {},
              "uuid": "dbc9a52b-0f84-4017-9ac3-53b83ab84b7c",
              "parentUUID": "70d018c9-fb62-4232-bfab-58f0812293dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Integration tests: Account methods\"",
              "fullTitle": "Integration tests: Account methods \"after all\" hook in \"Integration tests: Account methods\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"Clearing collections..\");\nawait clearCollections();",
              "err": {},
              "uuid": "9ea0e57c-6317-4e83-89f5-579e10be9cf6",
              "parentUUID": "70d018c9-fb62-4232-bfab-58f0812293dc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1df1db64-7ffd-4b78-9060-b55f133bf773",
              "title": "Testing Authenticated Account Routes: (All should have error+message)",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) \"before all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- START OF ACCOUNT AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "74504549-9ff8-4a79-86ca-8f8bf12b1dbc",
                  "parentUUID": "1df1db64-7ffd-4b78-9060-b55f133bf773",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) \"after all\" hook in \"Testing Authenticated Account Routes: (All should have error+message)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "console.log(\"-------------- END OF ACCOUNT AUTH TESTS --------------\");",
                  "err": {},
                  "uuid": "80a8e790-6396-4a3d-b3ce-e4b59ab6c61a",
                  "parentUUID": "1df1db64-7ffd-4b78-9060-b55f133bf773",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [],
              "suites": [
                {
                  "uuid": "d392480f-e198-49bd-9482-026e20513260",
                  "title": "Authenticate: Get My Reviews",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Get My Reviews: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: without token",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "d36c2038-a567-42de-b598-37437a80af78",
                      "parentUUID": "d392480f-e198-49bd-9482-026e20513260",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Get My Reviews: with invalid token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "9a6d7488-39ce-4543-bf44-f77b88e114fd",
                      "parentUUID": "d392480f-e198-49bd-9482-026e20513260",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Get My Reviews: with wrong token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Get My Reviews (Fail) Get My Reviews: with wrong token",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "7a31baef-6867-471a-bb1c-9cbc44e326df",
                      "parentUUID": "d392480f-e198-49bd-9482-026e20513260",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d36c2038-a567-42de-b598-37437a80af78",
                    "9a6d7488-39ce-4543-bf44-f77b88e114fd",
                    "7a31baef-6867-471a-bb1c-9cbc44e326df"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 31,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "74cf4e62-0dfd-48a8-ba59-c7333863f2c6",
                  "title": "Authenticate: Bookmark Review",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Bookmark One Review: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "e26bee72-1f11-4193-a70f-9a64090b1231",
                      "parentUUID": "74cf4e62-0dfd-48a8-ba59-c7333863f2c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Bookmark One Review: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: with invalid token ",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "8b466db8-0518-4b42-b527-3a947207f566",
                      "parentUUID": "74cf4e62-0dfd-48a8-ba59-c7333863f2c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Bookmark One Review: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Bookmark Review (Fail) Bookmark One Review: with wrong token ",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .send({ bookmarkedBool: false })\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "4b40477f-f1d9-4a39-95be-3952a7cc2c56",
                      "parentUUID": "74cf4e62-0dfd-48a8-ba59-c7333863f2c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e26bee72-1f11-4193-a70f-9a64090b1231",
                    "8b466db8-0518-4b42-b527-3a947207f566",
                    "4b40477f-f1d9-4a39-95be-3952a7cc2c56"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                },
                {
                  "uuid": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                  "title": "Authenticate: Update User Methods",
                  "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
                  "file": "\\test\\apptest.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "(Fail) Update Password: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: without token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "21a16142-75d0-4e6d-8fdb-1e08f179d1c7",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update Password: with invalid token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: with invalid token",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .send(testInput.updateUser1Password)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "fbcb3c08-f97b-4849-b9ee-f30f878b0b88",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update Password: with wrong token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update Password: with wrong token",
                      "timedOut": false,
                      "duration": 22,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "31348d90-6395-4523-b038-117b92b30a2f",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: without token",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "9bd195a0-8c08-4bbd-802b-815077f4645f",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: with invalid token ",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "f20a61ef-d835-486c-8085-d94863cccf14",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Theme: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Theme: with wrong token ",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .send(testInput.changeThemeUser1)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "b3084b9c-411c-4b38-b66b-c4a08525d900",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: without token",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: without token",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${\"\"}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "ca70eb2b-a515-45ac-b9cb-80ae719c60cd",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: with invalid token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: with invalid token ",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${invalid_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Token provided is invalid\"\n    });\n  });",
                      "err": {},
                      "uuid": "5dd67ba2-8932-4d71-916d-43ee3b99e12a",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "(Fail) Update User Details: with wrong token ",
                      "fullTitle": "Integration tests: Account methods Testing Authenticated Account Routes: (All should have error+message) Authenticate: Update User Methods (Fail) Update User Details: with wrong token ",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .send(testInput.updateUser1)\n  .set({ Authorization: `Bearer ${wrong_token}` })\n  .then(function(res) {\n    assert.equal(401, res.statusCode);\n    res.body.should.includes({\n      message: \"Request is invalid for current user\"\n    });\n  });",
                      "err": {},
                      "uuid": "1f8760d2-41cd-4f9f-9ff0-c63f31cc755c",
                      "parentUUID": "01cd0b50-3042-4f8b-821c-964b4fa2af02",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "21a16142-75d0-4e6d-8fdb-1e08f179d1c7",
                    "fbcb3c08-f97b-4849-b9ee-f30f878b0b88",
                    "31348d90-6395-4523-b038-117b92b30a2f",
                    "9bd195a0-8c08-4bbd-802b-815077f4645f",
                    "f20a61ef-d835-486c-8085-d94863cccf14",
                    "b3084b9c-411c-4b38-b66b-c4a08525d900",
                    "ca70eb2b-a515-45ac-b9cb-80ae719c60cd",
                    "5dd67ba2-8932-4d71-916d-43ee3b99e12a",
                    "1f8760d2-41cd-4f9f-9ff0-c63f31cc755c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 81,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 500000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "fa517360-2778-41a3-be1c-efe81f12e3d2",
              "title": "Get inserted User/Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get one review",
                  "fullTitle": "Integration tests: Account methods Get inserted User/Review Get one review",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/review/getReview/6354ef7ed7bf245d8940dd72\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"Review found\" });\n  });",
                  "err": {},
                  "uuid": "c57b3d52-2941-4efa-9b86-6892260244f4",
                  "parentUUID": "fa517360-2778-41a3-be1c-efe81f12e3d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get one user",
                  "fullTitle": "Integration tests: Account methods Get inserted User/Review Get one user",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(\"/account/profile/celenesaw\")\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({ message: \"User was found by username\" });\n  });",
                  "err": {},
                  "uuid": "b3d52a3f-f1f9-4662-97b7-25dc98e896c7",
                  "parentUUID": "fa517360-2778-41a3-be1c-efe81f12e3d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c57b3d52-2941-4efa-9b86-6892260244f4",
                "b3d52a3f-f1f9-4662-97b7-25dc98e896c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 82,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "236aa689-9250-4759-a384-020e673062d9",
              "title": "Integration: Log in User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Logs in the user",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Logs in the user",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.integrationUser)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    // setting tokens for user_auth\n    access_token = res.body;\n  });",
                  "err": {},
                  "uuid": "3e4da9df-f877-43e7-bc14-b8ad70802b20",
                  "parentUUID": "236aa689-9250-4759-a384-020e673062d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong password)",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Doesn't log in the user (wrong password)",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "65eb5939-2f52-4d36-b8f4-f0ec8056b76b",
                  "parentUUID": "236aa689-9250-4759-a384-020e673062d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doesn't log in the user (wrong email+password)",
                  "fullTitle": "Integration tests: Account methods Integration: Log in User Doesn't log in the user (wrong email+password)",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(\"/login\")\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"No user was found with the given user/email\"\n    });\n  });",
                  "err": {},
                  "uuid": "3d733aad-ea57-4e50-a733-0772e4a91f80",
                  "parentUUID": "236aa689-9250-4759-a384-020e673062d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e4da9df-f877-43e7-bc14-b8ad70802b20",
                "65eb5939-2f52-4d36-b8f4-f0ec8056b76b",
                "3d733aad-ea57-4e50-a733-0772e4a91f80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 181,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "14dac075-22a8-4c14-9684-e383043fdc4e",
              "title": "Integration: Get My Reviews",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get my reviews: User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get My Reviews Get my reviews: User 1",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/my-reviews/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"My reviews found.\"\n    });\n  });",
                  "err": {},
                  "uuid": "2fe27264-ec1b-4fdf-9e56-511cc7cb9210",
                  "parentUUID": "14dac075-22a8-4c14-9684-e383043fdc4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fe27264-ec1b-4fdf-9e56-511cc7cb9210"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "74589fc6-21c4-44a8-b843-bed5d63fe491",
              "title": "Integration: Get Other Reviews",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get other reviews: User 3 (list of 1)",
                  "fullTitle": "Integration tests: Account methods Integration: Get Other Reviews Get other reviews: User 3 (list of 1)",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/other-reviews/${userId3}`)\n  .send(testInput.wrongIntegrationUser2)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Other reviews found.\"\n    });\n    assert.equal(1, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "c79c0dca-2115-429a-842d-509c931d3d72",
                  "parentUUID": "74589fc6-21c4-44a8-b843-bed5d63fe491",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get other reviews: User 2 (list of 0)",
                  "fullTitle": "Integration tests: Account methods Integration: Get Other Reviews Get other reviews: User 2 (list of 0)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .get(`/account/other-reviews/${userId2}`)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Other reviews found.\"\n    });\n    assert.equal(0, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "b62de438-89b5-4eb0-a689-3fe8e48e9b7f",
                  "parentUUID": "74589fc6-21c4-44a8-b843-bed5d63fe491",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c79c0dca-2115-429a-842d-509c931d3d72",
                "b62de438-89b5-4eb0-a689-3fe8e48e9b7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "7994c397-88cb-4d8d-8fa4-6a9ee5c3382c",
              "title": "Integration: Bookmark Review",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Bookmarks a review: Review 1",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Bookmarks a review: Review 1",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "926254f5-3abb-42ff-a25f-766562d170f5",
                  "parentUUID": "7994c397-88cb-4d8d-8fa4-6a9ee5c3382c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Un-bookmarks a review: Review 1",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Un-bookmarks a review: Review 1",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: true })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was un-bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "fcc48adb-298b-4f5f-b23a-f84b1abf981d",
                  "parentUUID": "7994c397-88cb-4d8d-8fa4-6a9ee5c3382c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Failed to bookmark a review: Review 1 (bookmarkedBool undefined)",
                  "fullTitle": "Integration tests: Account methods Integration: Bookmark Review Failed to bookmark a review: Review 1 (bookmarkedBool undefined)",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: undefined })\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"Bookmarked bool was not received.\"\n    });\n  });",
                  "err": {},
                  "uuid": "f3278f64-1663-41b3-a2d6-3a5766bbbdb3",
                  "parentUUID": "7994c397-88cb-4d8d-8fa4-6a9ee5c3382c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "926254f5-3abb-42ff-a25f-766562d170f5",
                "fcc48adb-298b-4f5f-b23a-f84b1abf981d",
                "f3278f64-1663-41b3-a2d6-3a5766bbbdb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "b9d0bd27-2c79-4c7f-b478-337d282f04d6",
              "title": "Integration: Get Bookmarks",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Bookmarks a review: Review 1, User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Bookmarks a review: Review 1, User 1",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/bookmark/${reviewId}/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send({ bookmarkedBool: false })\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Review was bookmarked.\"\n    });\n  });",
                  "err": {},
                  "uuid": "ff4dfaf7-892a-4941-b5ac-b2ffc1b202c7",
                  "parentUUID": "b9d0bd27-2c79-4c7f-b478-337d282f04d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get my bookmarks: User 1",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Get my bookmarks: User 1",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(`/account/my-bookmarks/get`)\n  .send(testInput.bookmarksList)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"My bookmarks found.\"\n    });\n    assert.equal(1, res.body.data.length);\n  });",
                  "err": {},
                  "uuid": "5c33f3ce-1071-4d45-9869-f6a7a4a70e5b",
                  "parentUUID": "b9d0bd27-2c79-4c7f-b478-337d282f04d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get bookmarks: list undefined",
                  "fullTitle": "Integration tests: Account methods Integration: Get Bookmarks Get bookmarks: list undefined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .post(`/account/my-bookmarks/get`)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "75b918d1-234b-4182-a432-3999fa805b9d",
                  "parentUUID": "b9d0bd27-2c79-4c7f-b478-337d282f04d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff4dfaf7-892a-4941-b5ac-b2ffc1b202c7",
                "5c33f3ce-1071-4d45-9869-f6a7a4a70e5b",
                "75b918d1-234b-4182-a432-3999fa805b9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            },
            {
              "uuid": "5125663b-1448-4707-a57c-4ce6764cdaf7",
              "title": "Integration: Update User",
              "fullFile": "C:\\Users\\sawce\\OneDrive\\Desktop\\REACT\\itp\\image\\itp-sem2-all-for-one\\server\\test\\apptest.js",
              "file": "\\test\\apptest.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updates user password",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user password",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1Password)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully updated password.\"\n    });\n  });",
                  "err": {},
                  "uuid": "0dbb322d-ce4d-468a-a753-0ee152245f00",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user password: weak password",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user password: weak password",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .put(`/account/updatePassword`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1PasswordWeak)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n  });",
                  "err": {},
                  "uuid": "2b1e6190-87b5-4d64-9a21-00773d633089",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.should.includes({\n      message: \"Successfully updated theme.\"\n    });\n  });",
                  "err": {},
                  "uuid": "2ef781d7-d1f3-48e8-8691-2db0a8680f2b",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme: Undefined Theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme: Undefined Theme",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1Undefined)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"New theme is not defined.\"\n    });\n  });",
                  "err": {},
                  "uuid": "b3219dc9-d328-4782-a6f1-2cb23cc2273e",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user theme: Invalid theme",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user theme: Invalid theme",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/changeTheme/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.changeThemeUser1wrong)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({\n      message: \"New theme is not available.\"\n    });\n  });",
                  "err": {},
                  "uuid": "548c7b38-4f4e-4004-9173-90d1fb55d70b",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1)\n  .then(function(res) {\n    assert.equal(200, res.statusCode);\n    res.body.data.should.includes(testInput.updateUser1);\n  });",
                  "err": {},
                  "uuid": "587fe552-d73d-4b50-8af3-3076f24a9289",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details: Invalid username",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details: Invalid username",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1InvalidUsername)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({ message: \"Username/Email is not valid.\" });\n  });",
                  "err": {},
                  "uuid": "2ce9bbff-90c1-468c-83bc-6f95e203e5aa",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updates user details: Invalid email",
                  "fullTitle": "Integration tests: Account methods Integration: Update User Updates user details: Invalid email",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return await request(app)\n  .patch(`/account/updateUser/${userId}`)\n  .set({ Authorization: `Bearer ${access_token}` })\n  .send(testInput.updateUser1InvalidEmail)\n  .then(function(res) {\n    assert.equal(400, res.statusCode);\n    res.body.should.includes({ message: \"Username/Email is not valid.\" });\n  });",
                  "err": {},
                  "uuid": "074f748b-737b-4304-8c3d-32d9d69852a5",
                  "parentUUID": "5125663b-1448-4707-a57c-4ce6764cdaf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dbb322d-ce4d-468a-a753-0ee152245f00",
                "2b1e6190-87b5-4d64-9a21-00773d633089",
                "2ef781d7-d1f3-48e8-8691-2db0a8680f2b",
                "b3219dc9-d328-4782-a6f1-2cb23cc2273e",
                "548c7b38-4f4e-4004-9173-90d1fb55d70b",
                "587fe552-d73d-4b50-8af3-3076f24a9289",
                "2ce9bbff-90c1-468c-83bc-6f95e203e5aa",
                "074f748b-737b-4304-8c3d-32d9d69852a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 357,
              "root": false,
              "rootEmpty": false,
              "_timeout": 500000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 500000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 500000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.3.1"
    },
    "marge": {
      "options": {
        "html": "true"
      },
      "version": "5.2.0"
    }
  }
}